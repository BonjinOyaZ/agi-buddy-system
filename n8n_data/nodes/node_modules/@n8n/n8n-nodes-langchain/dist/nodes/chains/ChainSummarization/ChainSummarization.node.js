"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainSummarization = void 0;
const chains_1 = require("langchain/chains");
const prompts_1 = require("langchain/prompts");
const N8nJsonLoader_1 = require("../../../utils/N8nJsonLoader");
const N8nBinaryLoader_1 = require("../../../utils/N8nBinaryLoader");
const prompt_1 = require("./prompt");
class ChainSummarization {
    constructor() {
        this.description = {
            displayName: 'Summarization Chain',
            name: 'chainSummarization',
            icon: 'fa:link',
            group: ['transform'],
            version: 1,
            description: 'Transforms text into a concise summary',
            defaults: {
                name: 'Summarization Chain',
                color: '#909298',
            },
            codex: {
                alias: ['LangChain'],
                categories: ['AI'],
                subcategories: {
                    AI: ['Chains'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainsummarization/',
                        },
                    ],
                },
            },
            inputs: [
                "main",
                {
                    displayName: 'Model',
                    maxConnections: 1,
                    type: "ai_languageModel",
                    required: true,
                },
                {
                    displayName: 'Document',
                    maxConnections: 1,
                    type: "ai_document",
                    required: true,
                },
            ],
            outputs: ["main"],
            credentials: [],
            properties: [
                {
                    displayName: 'Specify the document to load in the document loader sub-node',
                    name: 'notice',
                    type: 'notice',
                    default: '',
                },
                {
                    displayName: 'Type',
                    name: 'type',
                    type: 'options',
                    description: 'The type of summarization to run',
                    default: 'map_reduce',
                    options: [
                        {
                            name: 'Map Reduce (Recommended)',
                            value: 'map_reduce',
                            description: 'Individually summarizes each document using an LLM (Map step), then combines these summaries into a global summary (Reduce step), with an optional compression step to ensure fit',
                        },
                        {
                            name: 'Refine',
                            value: 'refine',
                            description: 'Iteratively updates its answer by looping over the documents and passing the current document along with the latest intermediate answer to an LLM, suitable for analyzing large document sets, albeit with more LLM calls',
                        },
                        {
                            name: 'Stuff',
                            value: 'stuff',
                            description: 'Inserts all documents into a prompt, then passes it to an LLM for summarization, ideal for small document sets',
                        },
                    ],
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    default: {},
                    placeholder: 'Add Option',
                    options: [
                        {
                            displayName: 'Combine Map Prompt',
                            name: 'combineMapPrompt',
                            type: 'string',
                            displayOptions: {
                                show: {
                                    '/type': ['map_reduce'],
                                },
                            },
                            default: prompt_1.DEFAULT_PROMPT_TEMPLATE,
                            typeOptions: {
                                rows: 6,
                            },
                        },
                        {
                            displayName: 'Prompt',
                            name: 'prompt',
                            type: 'string',
                            default: prompt_1.DEFAULT_PROMPT_TEMPLATE,
                            displayOptions: {
                                hide: {
                                    '/type': ['refine'],
                                },
                            },
                            typeOptions: {
                                rows: 6,
                            },
                        },
                        {
                            displayName: 'Refine Prompt',
                            name: 'refinePrompt',
                            type: 'string',
                            displayOptions: {
                                show: {
                                    '/type': ['refine'],
                                },
                            },
                            default: prompt_1.REFINE_PROMPT_TEMPLATE,
                            typeOptions: {
                                rows: 6,
                            },
                        },
                        {
                            displayName: 'Refine Question Prompt',
                            name: 'refineQuestionPrompt',
                            type: 'string',
                            displayOptions: {
                                show: {
                                    '/type': ['refine'],
                                },
                            },
                            default: prompt_1.DEFAULT_PROMPT_TEMPLATE,
                            typeOptions: {
                                rows: 6,
                            },
                        },
                    ],
                },
            ],
        };
    }
    async execute() {
        this.logger.verbose('Executing Vector Store QA Chain');
        const type = this.getNodeParameter('type', 0);
        const model = (await this.getInputConnectionData("ai_languageModel", 0));
        const documentInput = (await this.getInputConnectionData("ai_document", 0));
        const options = this.getNodeParameter('options', 0, {});
        const chainArgs = {
            type,
        };
        if (type === 'map_reduce') {
            const mapReduceArgs = chainArgs;
            if (options.combineMapPrompt) {
                mapReduceArgs.combineMapPrompt = new prompts_1.PromptTemplate({
                    template: options.combineMapPrompt,
                    inputVariables: ['text'],
                });
            }
            if (options.prompt) {
                mapReduceArgs.combinePrompt = new prompts_1.PromptTemplate({
                    template: options.prompt,
                    inputVariables: ['text'],
                });
            }
        }
        if (type === 'stuff') {
            const stuffArgs = chainArgs;
            if (options.prompt) {
                stuffArgs.prompt = new prompts_1.PromptTemplate({
                    template: options.prompt,
                    inputVariables: ['text'],
                });
            }
        }
        if (type === 'refine') {
            const refineArgs = chainArgs;
            if (options.refinePrompt) {
                refineArgs.refinePrompt = new prompts_1.PromptTemplate({
                    template: options.refinePrompt,
                    inputVariables: ['existing_answer', 'text'],
                });
            }
            if (options.refineQuestionPrompt) {
                refineArgs.questionPrompt = new prompts_1.PromptTemplate({
                    template: options.refineQuestionPrompt,
                    inputVariables: ['text'],
                });
            }
        }
        const chain = (0, chains_1.loadSummarizationChain)(model, chainArgs);
        const items = this.getInputData();
        const returnData = [];
        for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {
            let processedDocuments;
            if (documentInput instanceof N8nJsonLoader_1.N8nJsonLoader || documentInput instanceof N8nBinaryLoader_1.N8nBinaryLoader) {
                processedDocuments = await documentInput.processItem(items[itemIndex], itemIndex);
            }
            else {
                processedDocuments = documentInput;
            }
            const response = await chain.call({
                input_documents: processedDocuments,
            });
            returnData.push({ json: { response } });
        }
        return this.prepareOutputData(returnData);
    }
}
exports.ChainSummarization = ChainSummarization;
//# sourceMappingURL=ChainSummarization.node.js.map