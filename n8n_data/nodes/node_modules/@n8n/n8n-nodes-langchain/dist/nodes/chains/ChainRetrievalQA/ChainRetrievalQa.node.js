"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainRetrievalQa = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const chains_1 = require("langchain/chains");
class ChainRetrievalQa {
    constructor() {
        this.description = {
            displayName: 'Retrieval Q&A Chain',
            name: 'chainRetrievalQa',
            icon: 'fa:link',
            group: ['transform'],
            version: 1,
            description: 'Retrieves answers to queries based on retrieved documents',
            defaults: {
                name: 'Retrieval Q&A Chain',
                color: '#909298',
            },
            codex: {
                alias: ['LangChain'],
                categories: ['AI'],
                subcategories: {
                    AI: ['Chains'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainretrievalqa/',
                        },
                    ],
                },
            },
            inputs: [
                "main",
                {
                    displayName: 'Model',
                    maxConnections: 1,
                    type: "ai_languageModel",
                    required: true,
                },
                {
                    displayName: 'Retriever',
                    maxConnections: 1,
                    type: "ai_retriever",
                    required: true,
                },
            ],
            outputs: ["main"],
            credentials: [],
            properties: [
                {
                    displayName: 'Query',
                    name: 'query',
                    type: 'string',
                    required: true,
                    default: '={{ $json.input }}',
                },
            ],
        };
    }
    async execute() {
        this.logger.verbose('Executing Retrieval QA Chain');
        const model = (await this.getInputConnectionData("ai_languageModel", 0));
        const retriever = (await this.getInputConnectionData("ai_retriever", 0));
        const items = this.getInputData();
        const chain = chains_1.RetrievalQAChain.fromLLM(model, retriever);
        const returnData = [];
        for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {
            const query = this.getNodeParameter('query', itemIndex);
            if (query === undefined) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No value for the required parameter "Query" was returned.');
            }
            const response = await chain.call({ query });
            returnData.push({ json: { response } });
        }
        return this.prepareOutputData(returnData);
    }
}
exports.ChainRetrievalQa = ChainRetrievalQa;
//# sourceMappingURL=ChainRetrievalQa.node.js.map