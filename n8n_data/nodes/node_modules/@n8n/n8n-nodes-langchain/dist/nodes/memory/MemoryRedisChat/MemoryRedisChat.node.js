"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryRedisChat = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const memory_1 = require("langchain/memory");
const redis_1 = require("langchain/stores/message/redis");
const redis_2 = require("redis");
const logWrapper_1 = require("../../../utils/logWrapper");
class MemoryRedisChat {
    constructor() {
        this.description = {
            displayName: 'Redis Chat Memory',
            name: 'memoryRedisChat',
            icon: 'file:redis.svg',
            group: ['transform'],
            version: 1,
            description: 'Stores the chat history in Redis.',
            defaults: {
                name: 'Redis Chat Memory',
            },
            credentials: [
                {
                    name: 'redis',
                    required: true,
                },
            ],
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Memory'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.memoryredischat/',
                        },
                    ],
                },
            },
            inputs: [],
            outputs: ["ai_memory"],
            outputNames: ['Memory'],
            properties: [
                {
                    displayName: 'Session Key',
                    name: 'sessionKey',
                    type: 'string',
                    default: 'chat_history',
                    description: 'The key to use to store the memory in the workflow data',
                },
                {
                    displayName: 'Session Time To Live',
                    name: 'sessionTTL',
                    type: 'number',
                    default: 0,
                    description: 'For how long the session should be stored in seconds. If set to 0 it will not expire.',
                },
            ],
        };
    }
    async supplyData(itemIndex) {
        const credentials = await this.getCredentials('redis');
        const sessionKey = this.getNodeParameter('sessionKey', itemIndex);
        const sessionTTL = this.getNodeParameter('sessionTTL', itemIndex, 0);
        const redisOptions = {
            socket: {
                host: credentials.host,
                port: credentials.port,
            },
            database: credentials.database,
        };
        if (credentials.password) {
            redisOptions.password = credentials.password;
        }
        const client = (0, redis_2.createClient)({
            ...redisOptions,
        });
        client.on('error', async (error) => {
            await client.quit();
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Redis Error: ' + error.message);
        });
        const redisChatConfig = {
            client,
            sessionId: sessionKey,
        };
        if (sessionTTL > 0) {
            redisChatConfig.sessionTTL = sessionTTL;
        }
        const redisChatHistory = new redis_1.RedisChatMessageHistory(redisChatConfig);
        const memory = new memory_1.BufferMemory({
            memoryKey: 'chat_history',
            chatHistory: redisChatHistory,
            returnMessages: true,
            inputKey: 'input',
            outputKey: 'output',
        });
        return {
            response: (0, logWrapper_1.logWrapper)(memory, this),
        };
    }
}
exports.MemoryRedisChat = MemoryRedisChat;
//# sourceMappingURL=MemoryRedisChat.node.js.map