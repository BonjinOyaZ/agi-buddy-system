"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryXata = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const xata_1 = require("langchain/stores/message/xata");
const memory_1 = require("langchain/memory");
const client_1 = require("@xata.io/client");
const logWrapper_1 = require("../../../utils/logWrapper");
class MemoryXata {
    constructor() {
        this.description = {
            displayName: 'Xata',
            name: 'memoryXata',
            icon: 'file:xata.svg',
            group: ['transform'],
            version: 1,
            description: 'Use Xata Memory',
            defaults: {
                name: 'Xata',
                color: '#1321A7',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Memory'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.memoryxata/',
                        },
                    ],
                },
            },
            inputs: [],
            outputs: ["ai_memory"],
            outputNames: ['Memory'],
            credentials: [
                {
                    name: 'xataApi',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Session ID',
                    name: 'sessionId',
                    type: 'string',
                    required: true,
                    default: '',
                },
            ],
        };
    }
    async supplyData(itemIndex) {
        const credentials = await this.getCredentials('xataApi');
        const xataClient = new client_1.BaseClient({
            apiKey: credentials.apiKey,
            branch: credentials.branch || 'main',
            databaseURL: credentials.databaseEndpoint,
        });
        const sessionId = this.getNodeParameter('sessionId', itemIndex);
        const table = credentials.databaseEndpoint.match(/https:\/\/[^.]+\.[^.]+\.xata\.sh\/db\/([^\/:]+)/);
        if (table === null) {
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'It was not possible to extract the table from the Database Endpoint.');
        }
        const memory = new memory_1.BufferMemory({
            chatHistory: new xata_1.XataChatMessageHistory({
                table: table[1],
                sessionId,
                client: xataClient,
                apiKey: credentials.apiKey,
            }),
            memoryKey: 'chat_history',
            returnMessages: true,
        });
        return {
            response: (0, logWrapper_1.logWrapper)(memory, this),
        };
    }
}
exports.MemoryXata = MemoryXata;
//# sourceMappingURL=MemoryXata.node.js.map