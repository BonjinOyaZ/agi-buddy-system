import type { VectorStore } from 'langchain/vectorstores/base';
import type { INodeCredentialDescription, INodeProperties, INodeExecutionData, IExecuteFunctions, INodeTypeDescription, SupplyData } from 'n8n-workflow';
import type { Embeddings } from 'langchain/embeddings/base';
import type { Document } from 'langchain/document';
interface NodeMeta {
    displayName: string;
    name: string;
    description: string;
    docsUrl: string;
    icon: string;
    credentials?: INodeCredentialDescription[];
}
interface VectorStoreNodeConstructorArgs {
    meta: NodeMeta;
    sharedFields: INodeProperties[];
    insertFields?: INodeProperties[];
    loadFields?: INodeProperties[];
    retrieveFields?: INodeProperties[];
    populateVectorStore: (context: IExecuteFunctions, embeddings: Embeddings, documents: Array<Document<Record<string, unknown>>>, itemIndex: number) => Promise<void>;
    getVectorStoreClient: (context: IExecuteFunctions, filter: Record<string, never> | undefined, embeddings: Embeddings, itemIndex: number) => Promise<VectorStore>;
}
export declare const createVectorStoreNode: (args: VectorStoreNodeConstructorArgs) => {
    new (): {
        description: INodeTypeDescription;
        execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]>;
        supplyData(this: IExecuteFunctions, itemIndex: number): Promise<SupplyData>;
    };
};
export {};
