"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorStorePinecone = void 0;
const pinecone_1 = require("langchain/vectorstores/pinecone");
const pinecone_2 = require("@pinecone-database/pinecone");
const createVectorStoreNode_1 = require("../shared/createVectorStoreNode");
const sharedFields_1 = require("../../../utils/sharedFields");
const sharedFields = [
    {
        displayName: 'Pinecone Index',
        name: 'pineconeIndex',
        type: 'string',
        default: '',
        required: true,
    },
];
const retrieveFields = [
    {
        displayName: 'Options',
        name: 'options',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        options: [
            {
                displayName: 'Pinecone Namespace',
                name: 'pineconeNamespace',
                type: 'string',
                description: 'Partition the records in an index into namespaces. Queries and other operations are then limited to one namespace, so different requests can search different subsets of your index.',
                default: '',
            },
            sharedFields_1.metadataFilterField,
        ],
    },
];
const insertFields = [
    {
        displayName: 'Options',
        name: 'options',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        options: [
            {
                displayName: 'Clear Namespace',
                name: 'clearNamespace',
                type: 'boolean',
                default: false,
                description: 'Whether to clear the namespace before inserting new data',
            },
            {
                displayName: 'Pinecone Namespace',
                name: 'pineconeNamespace',
                type: 'string',
                description: 'Partition the records in an index into namespaces. Queries and other operations are then limited to one namespace, so different requests can search different subsets of your index.',
                default: '',
            },
        ],
    },
];
exports.VectorStorePinecone = (0, createVectorStoreNode_1.createVectorStoreNode)({
    meta: {
        displayName: 'Pinecone Vector Store',
        name: 'vectorStorePinecone',
        description: 'Work with your data in Pinecone Vector Store',
        icon: 'file:pinecone.svg',
        docsUrl: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstorepinecone/',
        credentials: [
            {
                name: 'pineconeApi',
                required: true,
            },
        ],
    },
    retrieveFields,
    loadFields: retrieveFields,
    insertFields,
    sharedFields,
    async getVectorStoreClient(context, filter, embeddings, itemIndex) {
        var _a;
        const index = context.getNodeParameter('pineconeIndex', itemIndex);
        const options = context.getNodeParameter('options', itemIndex, {});
        const credentials = await context.getCredentials('pineconeApi');
        const client = new pinecone_2.Pinecone({
            apiKey: credentials.apiKey,
            environment: credentials.environment,
        });
        const pineconeIndex = client.Index(index);
        const config = {
            namespace: (_a = options.pineconeNamespace) !== null && _a !== void 0 ? _a : undefined,
            pineconeIndex,
            filter,
        };
        return pinecone_1.PineconeStore.fromExistingIndex(embeddings, config);
    },
    async populateVectorStore(context, embeddings, documents, itemIndex) {
        var _a;
        const index = context.getNodeParameter('pineconeIndex', itemIndex);
        const options = context.getNodeParameter('options', itemIndex, {});
        const credentials = await context.getCredentials('pineconeApi');
        const client = new pinecone_2.Pinecone({
            apiKey: credentials.apiKey,
            environment: credentials.environment,
        });
        const pineconeIndex = client.Index(index);
        if (options.pineconeNamespace && options.clearNamespace) {
            await pineconeIndex.namespace(options.pineconeNamespace).deleteAll();
        }
        await pinecone_1.PineconeStore.fromDocuments(documents, embeddings, {
            namespace: (_a = options.pineconeNamespace) !== null && _a !== void 0 ? _a : undefined,
            pineconeIndex,
        });
    },
});
//# sourceMappingURL=VectorStorePinecone.node.js.map