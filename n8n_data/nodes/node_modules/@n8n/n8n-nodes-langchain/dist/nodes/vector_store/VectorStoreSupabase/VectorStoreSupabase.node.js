"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorStoreSupabase = void 0;
const supabase_js_1 = require("@supabase/supabase-js");
const supabase_1 = require("langchain/vectorstores/supabase");
const createVectorStoreNode_1 = require("../shared/createVectorStoreNode");
const sharedFields_1 = require("../../../utils/sharedFields");
const sharedFields = [
    {
        displayName: 'Table Name',
        name: 'tableName',
        type: 'string',
        default: '',
        required: true,
        description: 'Name of the table to load from',
    },
];
const insertFields = [
    {
        displayName: 'Options',
        name: 'options',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        options: [
            {
                displayName: 'Query Name',
                name: 'queryName',
                type: 'string',
                default: 'match_documents',
                description: 'Name of the query to use for matching documents',
            },
        ],
    },
];
const retrieveFields = [
    {
        displayName: 'Options',
        name: 'options',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        options: [
            {
                displayName: 'Query Name',
                name: 'queryName',
                type: 'string',
                default: 'match_documents',
                description: 'Name of the query to use for matching documents',
            },
            sharedFields_1.metadataFilterField,
        ],
    },
];
exports.VectorStoreSupabase = (0, createVectorStoreNode_1.createVectorStoreNode)({
    meta: {
        description: 'Work with your data in Supabase Vector Store',
        icon: 'file:supabase.svg',
        displayName: 'Supabase Vector Store',
        docsUrl: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoresupabase/',
        name: 'vectorStoreSupabase',
        credentials: [
            {
                name: 'supabaseApi',
                required: true,
            },
        ],
    },
    sharedFields,
    insertFields,
    loadFields: retrieveFields,
    retrieveFields,
    async getVectorStoreClient(context, filter, embeddings, itemIndex) {
        var _a;
        const tableName = context.getNodeParameter('tableName', itemIndex);
        const options = context.getNodeParameter('options', itemIndex, {});
        const credentials = await context.getCredentials('supabaseApi');
        const client = (0, supabase_js_1.createClient)(credentials.host, credentials.serviceRole);
        return supabase_1.SupabaseVectorStore.fromExistingIndex(embeddings, {
            client,
            tableName,
            queryName: (_a = options.queryName) !== null && _a !== void 0 ? _a : 'match_documents',
            filter,
        });
    },
    async populateVectorStore(context, embeddings, documents, itemIndex) {
        var _a;
        const tableName = context.getNodeParameter('tableName', itemIndex);
        const options = context.getNodeParameter('options', itemIndex, {});
        const credentials = await context.getCredentials('supabaseApi');
        const client = (0, supabase_js_1.createClient)(credentials.host, credentials.serviceRole);
        void supabase_1.SupabaseVectorStore.fromDocuments(documents, embeddings, {
            client,
            tableName,
            queryName: (_a = options.queryName) !== null && _a !== void 0 ? _a : 'match_documents',
        });
    },
});
//# sourceMappingURL=VectorStoreSupabase.node.js.map