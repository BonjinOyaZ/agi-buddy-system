"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Agent = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const description_1 = require("./agents/ConversationalAgent/description");
const execute_1 = require("./agents/ConversationalAgent/execute");
const description_2 = require("./agents/OpenAiFunctionsAgent/description");
const execute_2 = require("./agents/OpenAiFunctionsAgent/execute");
const description_3 = require("./agents/ReActAgent/description");
const execute_3 = require("./agents/ReActAgent/execute");
const description_4 = require("./agents/SqlAgent/description");
const execute_4 = require("./agents/SqlAgent/execute");
function getInputs(agent) {
    const getInputData = (inputs) => {
        const displayNames = {
            ["ai_languageModel"]: 'Model',
            ["ai_memory"]: 'Memory',
            ["ai_tool"]: 'Tool',
            ["ai_outputParser"]: 'Output Parser',
        };
        return inputs.map(({ type, filter }) => {
            const input = {
                type,
                displayName: type in displayNames ? displayNames[type] : undefined,
                required: type === "ai_languageModel",
                maxConnections: ["ai_languageModel", "ai_memory"].includes(type)
                    ? 1
                    : undefined,
            };
            if (filter) {
                input.filter = filter;
            }
            return input;
        });
    };
    let specialInputs = [];
    if (agent === 'conversationalAgent') {
        specialInputs = [
            {
                type: "ai_languageModel",
                filter: {
                    nodes: [
                        '@n8n/n8n-nodes-langchain.lmChatAnthropic',
                        '@n8n/n8n-nodes-langchain.lmChatOllama',
                        '@n8n/n8n-nodes-langchain.lmChatOpenAi',
                        '@n8n/n8n-nodes-langchain.lmChatGooglePalm',
                    ],
                },
            },
            {
                type: "ai_memory",
            },
            {
                type: "ai_tool",
            },
            {
                type: "ai_outputParser",
            },
        ];
    }
    else if (agent === 'openAiFunctionsAgent') {
        specialInputs = [
            {
                type: "ai_languageModel",
                filter: {
                    nodes: ['@n8n/n8n-nodes-langchain.lmChatOpenAi'],
                },
            },
            {
                type: "ai_memory",
            },
            {
                type: "ai_tool",
            },
            {
                type: "ai_outputParser",
            },
        ];
    }
    else if (agent === 'reActAgent') {
        specialInputs = [
            {
                type: "ai_languageModel",
            },
            {
                type: "ai_tool",
            },
            {
                type: "ai_outputParser",
            },
        ];
    }
    else if (agent === 'sqlAgent') {
        specialInputs = [
            {
                type: "ai_languageModel",
            },
        ];
    }
    return ["main", ...getInputData(specialInputs)];
}
class Agent {
    constructor() {
        this.description = {
            displayName: 'Agent',
            name: 'agent',
            icon: 'fa:robot',
            group: ['transform'],
            version: 1,
            description: 'Seamlessly coordinates LLMs & tools per user input',
            subtitle: "={{ {	conversationalAgent: 'Conversational Agent', openAiFunctionsAgent: 'OpenAI Functions Agent', reactAgent: 'ReAct Agent', sqlAgent: 'SQL Agent' }[$parameter.agent] }}",
            defaults: {
                name: 'Agent',
                color: '#404040',
            },
            codex: {
                alias: ['LangChain'],
                categories: ['AI'],
                subcategories: {
                    AI: ['Agents'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/',
                        },
                    ],
                },
            },
            inputs: `={{ ((agent) => { ${getInputs.toString()}; return getInputs(agent) })($parameter.agent) }}`,
            outputs: ["main"],
            credentials: [
                {
                    name: 'mySql',
                    required: true,
                    testedBy: 'mysqlConnectionTest',
                    displayOptions: {
                        show: {
                            agent: ['sqlAgent'],
                            '/dataSource': ['mysql'],
                        },
                    },
                },
                {
                    name: 'postgres',
                    required: true,
                    displayOptions: {
                        show: {
                            agent: ['sqlAgent'],
                            '/dataSource': ['postgres'],
                        },
                    },
                },
            ],
            properties: [
                {
                    displayName: 'Agent',
                    name: 'agent',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Conversational Agent',
                            value: 'conversationalAgent',
                            description: 'Selects tools to accomplish its task and uses memory to recall previous conversations',
                        },
                        {
                            name: 'OpenAI Functions Agent',
                            value: 'openAiFunctionsAgent',
                            description: "Utilizes OpenAI's Function Calling feature to select the appropriate tool and arguments for execution",
                        },
                        {
                            name: 'ReAct Agent',
                            value: 'reActAgent',
                            description: 'Strategically select tools to accomplish a given task',
                        },
                        {
                            name: 'SQL Agent',
                            value: 'sqlAgent',
                            description: 'Answers questions about data in an SQL database',
                        },
                    ],
                    default: 'conversationalAgent',
                },
                ...description_1.conversationalAgentProperties,
                ...description_2.openAiFunctionsAgentProperties,
                ...description_3.reActAgentAgentProperties,
                ...description_4.sqlAgentAgentProperties,
            ],
        };
    }
    async execute() {
        const agentType = this.getNodeParameter('agent', 0, '');
        if (agentType === 'conversationalAgent') {
            return execute_1.conversationalAgentExecute.call(this);
        }
        else if (agentType === 'openAiFunctionsAgent') {
            return execute_2.openAiFunctionsAgentExecute.call(this);
        }
        else if (agentType === 'reActAgent') {
            return execute_3.reActAgentAgentExecute.call(this);
        }
        else if (agentType === 'sqlAgent') {
            return execute_4.sqlAgentAgentExecute.call(this);
        }
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), `The agent type "${agentType}" is not supported`);
    }
}
exports.Agent = Agent;
//# sourceMappingURL=Agent.node.js.map