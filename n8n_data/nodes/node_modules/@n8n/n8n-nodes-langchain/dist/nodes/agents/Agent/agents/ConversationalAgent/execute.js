"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.conversationalAgentExecute = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const agents_1 = require("langchain/agents");
const base_1 = require("langchain/chat_models/base");
const prompts_1 = require("langchain/prompts");
const output_parsers_1 = require("langchain/output_parsers");
async function conversationalAgentExecute() {
    var _a;
    this.logger.verbose('Executing Conversational Agent');
    const model = (await this.getInputConnectionData("ai_languageModel", 0));
    if (!(model instanceof base_1.BaseChatModel)) {
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Conversational Agent requires Chat Model');
    }
    const memory = (await this.getInputConnectionData("ai_memory", 0));
    const tools = (await this.getInputConnectionData("ai_tool", 0));
    const outputParsers = (await this.getInputConnectionData("ai_outputParser", 0));
    const options = this.getNodeParameter('options', 0, {});
    const agentExecutor = await (0, agents_1.initializeAgentExecutorWithOptions)(tools, model, {
        agentType: 'chat-conversational-react-description',
        memory,
        maxIterations: (_a = options.maxIterations) !== null && _a !== void 0 ? _a : 10,
        agentArgs: {
            systemMessage: options.systemMessage,
            humanMessage: options.humanMessage,
        },
    });
    const returnData = [];
    let outputParser;
    let prompt;
    if (outputParsers.length) {
        if (outputParsers.length === 1) {
            outputParser = outputParsers[0];
        }
        else {
            outputParser = new output_parsers_1.CombiningOutputParser(...outputParsers);
        }
        const formatInstructions = outputParser.getFormatInstructions();
        prompt = new prompts_1.PromptTemplate({
            template: '{input}\n{formatInstructions}',
            inputVariables: ['input'],
            partialVariables: { formatInstructions },
        });
    }
    const items = this.getInputData();
    for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {
        let input = this.getNodeParameter('text', itemIndex);
        if (input === undefined) {
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No value for the required parameter "Text" was returned.');
        }
        if (prompt) {
            input = (await prompt.invoke({ input })).value;
        }
        let response = await agentExecutor.call({ input, outputParsers });
        if (outputParser) {
            response = { output: await outputParser.parse(response.output) };
        }
        returnData.push({ json: response });
    }
    return this.prepareOutputData(returnData);
}
exports.conversationalAgentExecute = conversationalAgentExecute;
//# sourceMappingURL=execute.js.map