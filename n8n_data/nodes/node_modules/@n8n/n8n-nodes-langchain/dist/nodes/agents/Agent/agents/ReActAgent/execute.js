"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reActAgentAgentExecute = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const agents_1 = require("langchain/agents");
const prompts_1 = require("langchain/prompts");
const output_parsers_1 = require("langchain/output_parsers");
const base_1 = require("langchain/chat_models/base");
async function reActAgentAgentExecute() {
    this.logger.verbose('Executing ReAct Agent');
    const model = (await this.getInputConnectionData("ai_languageModel", 0));
    const tools = (await this.getInputConnectionData("ai_tool", 0));
    const outputParsers = (await this.getInputConnectionData("ai_outputParser", 0));
    const options = this.getNodeParameter('options', 0, {});
    let agent;
    if (model instanceof base_1.BaseChatModel) {
        agent = agents_1.ChatAgent.fromLLMAndTools(model, tools, {
            prefix: options.prefix,
            suffix: options.suffixChat,
            humanMessageTemplate: options.humanMessageTemplate,
        });
    }
    else {
        agent = agents_1.ZeroShotAgent.fromLLMAndTools(model, tools, {
            prefix: options.prefix,
            suffix: options.suffix,
        });
    }
    const agentExecutor = agents_1.AgentExecutor.fromAgentAndTools({ agent, tools });
    const returnData = [];
    let outputParser;
    let prompt;
    if (outputParsers.length) {
        outputParser =
            outputParsers.length === 1 ? outputParsers[0] : new output_parsers_1.CombiningOutputParser(...outputParsers);
        const formatInstructions = outputParser.getFormatInstructions();
        prompt = new prompts_1.PromptTemplate({
            template: '{input}\n{formatInstructions}',
            inputVariables: ['input'],
            partialVariables: { formatInstructions },
        });
    }
    const items = this.getInputData();
    for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {
        let input = this.getNodeParameter('text', itemIndex);
        if (input === undefined) {
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No value for the required parameter "Text" was returned.');
        }
        if (prompt) {
            input = (await prompt.invoke({ input })).value;
        }
        let response = await agentExecutor.call({ input, outputParsers });
        if (outputParser) {
            response = { output: await outputParser.parse(response.output) };
        }
        returnData.push({ json: response });
    }
    return this.prepareOutputData(returnData);
}
exports.reActAgentAgentExecute = reActAgentAgentExecute;
//# sourceMappingURL=execute.js.map