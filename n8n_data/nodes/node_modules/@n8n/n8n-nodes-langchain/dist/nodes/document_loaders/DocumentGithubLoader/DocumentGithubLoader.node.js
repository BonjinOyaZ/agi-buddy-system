"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentGithubLoader = void 0;
const github_1 = require("langchain/document_loaders/web/github");
const logWrapper_1 = require("../../../utils/logWrapper");
class DocumentGithubLoader {
    constructor() {
        this.description = {
            displayName: 'GitHub Document Loader',
            name: 'documentGithubLoader',
            icon: 'file:github.svg',
            group: ['transform'],
            version: 1,
            description: 'Use GitHub data as input to this chain',
            defaults: {
                name: 'GitHub Document Loader',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Document Loaders'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.documentgithubloader/',
                        },
                    ],
                },
            },
            credentials: [
                {
                    name: 'githubApi',
                    required: true,
                },
            ],
            inputs: [
                {
                    displayName: 'Text Splitter',
                    maxConnections: 1,
                    type: "ai_textSplitter",
                },
            ],
            inputNames: ['Text Splitter'],
            outputs: ["ai_document"],
            outputNames: ['Document'],
            properties: [
                {
                    displayName: 'Repository Link',
                    name: 'repository',
                    type: 'string',
                    default: '',
                },
                {
                    displayName: 'Branch',
                    name: 'branch',
                    type: 'string',
                    default: 'main',
                },
                {
                    displayName: 'Options',
                    name: 'additionalOptions',
                    type: 'collection',
                    placeholder: 'Add Option',
                    default: {},
                    options: [
                        {
                            displayName: 'Recursive',
                            name: 'recursive',
                            type: 'boolean',
                            default: false,
                        },
                        {
                            displayName: 'Ignore Paths',
                            name: 'recursive',
                            type: 'string',
                            description: 'Comma-separated list of paths to ignore, e.g. "docs, src/tests',
                            default: '',
                        },
                    ],
                },
            ],
        };
    }
    async supplyData(itemIndex) {
        console.log('Supplying data for Github Document Loader');
        const repository = this.getNodeParameter('repository', itemIndex);
        const branch = this.getNodeParameter('branch', itemIndex);
        const credentials = await this.getCredentials('githubApi');
        const { ignorePaths, recursive } = this.getNodeParameter('additionalOptions', 0);
        const textSplitter = (await this.getInputConnectionData("ai_textSplitter", 0));
        const docs = new github_1.GithubRepoLoader(repository, {
            branch,
            ignorePaths: (ignorePaths !== null && ignorePaths !== void 0 ? ignorePaths : '').split(',').map((p) => p.trim()),
            recursive,
            accessToken: credentials.accessToken || '',
        });
        const loadedDocs = textSplitter ? await docs.loadAndSplit(textSplitter) : await docs.load();
        return {
            response: (0, logWrapper_1.logWrapper)(loadedDocs, this),
        };
    }
}
exports.DocumentGithubLoader = DocumentGithubLoader;
//# sourceMappingURL=DocumentGithubLoader.node.js.map